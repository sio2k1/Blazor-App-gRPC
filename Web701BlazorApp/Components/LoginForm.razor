@*Login form and auth component*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@using WEB701BalzorApp.Auth
@using System.Web
@using SQLReflectionMapper
@using Web701BlazorApp.Utils

<div class="w-full max-w-xs">
    <EditForm Model="@user" OnValidSubmit="ValidateUser" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
                Username
            </label>
            <InputText @bind-Value="user.uLogin" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="username" type="text" placeholder="Username"></InputText>
        </div>
        <div class="mb-6">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="password">
                Password
            </label>
            @if (incorrectPWD)
            {
                <InputText @bind-Value="user.uPassword" class="shadow appearance-none border border-red-500 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="password" type="password" placeholder="******************"></InputText>
                <p class="text-red-500 text-xs italic">Incorrect password.</p>
            }
            else
            {
                <InputText @bind-Value="user.uPassword" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="password" type="password" placeholder="******************"></InputText>
            }
        </div>
        <div class="flex items-center justify-between">
            <button class="bg-gray-800 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                Sign In
            </button>
            <a class="inline-block align-baseline font-bold text-sm text-gray-800 hover:text-gray-600" href="#">
                Forgot Password?
            </a>
        </div>
    </EditForm>
</div>


@code {
    bool incorrectPWD = false;

    private User user = new User();
    protected override async void OnInitialized()
    {
        string info = "";

        try
        {
            info += httpContextAccessor.HttpContext.Request.Headers["User-Agent"];
            info += httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
        } catch (Exception e)
        {
            Console.WriteLine(e.GetBaseException().Message);
        }

        string hashedXtra = shaHelper.GetHash(info);
        await localStorage.SetItemAsync("xtra", hashedXtra); //set up user agent to secure auth a bit, auth token linked to user agent and remote ip
    }
    private async Task<bool> ValidateUser()
    {
        var xtra = await localStorage.GetItemAsync<string>("xtra");
        ParamList p = new ParamList()
        {
            ["login"] = user.uLogin,
            ["password"] = user.uPassword,
            ["extrainfo"] = xtra
        };

        List<User> u = new List<User>();
        try
        {
            u = DBExecuter.SQLRequestSPAutoFillParams("sp_VerifyUserByLoginPassword", p).Map<User>(); //request db if user exists there
        }
        catch (Exception e)
        {
            Console.WriteLine(e.GetBaseException().Message);
        }

        if (u.Count == 1) // if exists proceed login
        {
            user = u.First();
            await ((BasicAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);
            NavigationManager.NavigateTo("");
        }
        else
        {
            incorrectPWD = true; // if not show wrong pwd message
            this.StateHasChanged();
        }
        return await Task.FromResult(true);
    }


}