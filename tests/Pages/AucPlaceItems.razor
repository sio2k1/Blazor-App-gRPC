@page "/aucplace"
@using WEB701BalzorApp.infastructure
@using SQLReflectionMapper
@using System.Threading;
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Add auc Item</h3>
<AuthorizeView Roles="sa, member, client" Context="aucplace">
    <Authorized>
        <EditForm Model="@ar" OnValidSubmit="AddItem">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="exampleInputEmail1">Item Name</label>
                <InputText @bind-Value="ar.name" class="form-control" placeholder="Item Name" />
            </div>
            <div class="form-group">
                <label for="exampleInputEmail1">Item Size</label>
                <InputNumber @bind-Value="ar.size" class="form-control" placeholder="Item Size" />
            </div>
            <div class="form-group">
                <label for="exampleInputEmail1">Item Category</label>
                <InputSelect @bind-Value="ar.category" class="form-control">
                    <option value="">Select category ...</option>
                    <option value="extra">Extra</option>
                    <option value="1st">I</option>
                    <option value="2nd">II</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        @foreach (var record in DB.lst)
        {
            <p>@System.Text.Json.JsonSerializer.Serialize(record); </p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Pleace sign in!</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    string userName = "";
    AucRecord ar = new AucRecord();
    protected override async Task OnInitializedAsync()
    {
        userName = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        //DB.lst = DBExecuter.SQLRequest("select * from items", new ParamList()).Map<AucRecord>();
        var timer = new Timer(new TimerCallback(_ =>
        {
            List<AucRecord> newList = DBExecuter.SQLRequest("select * from items", new ParamList()).Map<AucRecord>();
            if (DB.lst != newList)
            {
                DB.lst = newList;
                InvokeAsync(this.StateHasChanged);
            }

        }), null, 100, 1000);
    }
    private void AddItem()
    {
        double pricec = 10;
        switch (ar.category)
        {
            case "extra":
                pricec = pricec * 1.3 + ar.size;
                break;
            case "1st":
                pricec = pricec * 1.1 + ar.size;
                break;
            default:
                pricec = pricec * 1 + ar.size;
                break;
        }
        ar.price = pricec;
        ParamList p = new ParamList() {
            ["nm"] = ar.name,
            ["pr"] = ar.price,
            ["un"] = userName,
            ["cat"] = ar.category,
            ["sz"] = ar.size };
        DBExecuter.execNonQuery("insert into items " +
            "(name, price, [user], category, size) " +
            "values (@nm, @pr, @un, @cat, @sz)", p);
        DB.lst = DBExecuter.SQLRequest("select * from items",
            new ParamList()).Map<AucRecord>();
    }
}

